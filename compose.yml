services:

  postgres:
    image: postgres:16.2-alpine
    environment:
      - POSTGRES_USER=template
      - POSTGRES_PASSWORD=template
      - POSTGRES_DB=template
    ports:
      - "5432:5432"
    volumes:
      - postgres_data:/var/lib/postgresql/data
    networks:
      - backend-network

  zookeeper:
    image: confluentinc/cp-zookeeper:latest
    ports:
      - "2181:2181"
    environment:
      ZOOKEEPER_CLIENT_PORT: 2181
    volumes:
      - zookeeper_data:/var/lib/zookeeper/data
      - zookeeper_log:/var/lib/zookeeper/log
    networks:
      - kafka-network

  kafka:
    image: confluentinc/cp-kafka:latest
    ports:
      - "9092:9092"
      - "29092:29092"
    environment:
      KAFKA_ZOOKEEPER_CONNECT: zookeeper:2181
      KAFKA_ADVERTISED_LISTENERS: |
        PLAINTEXT://localhost:9092,INTERNAL://kafka:29092
      KAFKA_LISTENERS: PLAINTEXT://0.0.0.0:9092,INTERNAL://0.0.0.0:29092
      KAFKA_LISTENER_SECURITY_PROTOCOL_MAP: PLAINTEXT:PLAINTEXT,INTERNAL:PLAINTEXT
      KAFKA_INTER_BROKER_LISTENER_NAME: INTERNAL
      KAFKA_BROKER_ID: 1
      KAFKA_OFFSETS_TOPIC_REPLICATION_FACTOR: 1
    depends_on:
      - zookeeper
    volumes:
      - kafka_data:/var/lib/kafka/data
    networks:
      - kafka-network

  kafka-ui:
    image: provectuslabs/kafka-ui:latest
    environment:
      KAFKA_CLUSTERS_0_NAME: local
      KAFKA_CLUSTERS_0_BOOTSTRAPSERVERS: kafka:29092
      KAFKA_CLUSTERS_0_ZOOKEEPER: zookeeper:2181
    ports:
      - 8090:8080
    depends_on:
      - kafka
    networks:
      - kafka-network

  cassandra:
    image: cassandra:latest
#    container_name: cassandra
    ports:
      - "9042:9042"
    environment:
#      - CASSANDRA_CONTACT_POINTS=cassandra
      - CASSANDRA_DC=datacenter1
      - CASSANDRA_RACK=rack1
    healthcheck:
      test: [ "CMD", "cqlsh", "-e", "describe keyspaces" ]
      interval: 30s
      timeout: 10s
      retries: 5
    volumes:
      - cassandra_data:/var/lib/cassandra  # Persist Cassandra data
      - ./init.cql:/docker-entrypoint-initdb.d/init.cql
#      - ./custom-entrypoint.sh:/custom-entrypoint.sh
#    entrypoint: [ "bash", "/custom-entrypoint.sh" ]
    networks:
      - cassandra-network

  backend:
    profiles: [ backend ]
    build: .
    environment:
      SERVER_PORT: 8080
      SPRING_DATASOURCE_URL: jdbc:postgresql://postgres:5432/template
    ports:
      - "8080:8080"
    depends_on:
      - postgres
      - kafka
      - cassandra
    networks:
      - backend-network
      - kafka-network
      - cassandra-network

volumes:
  postgres_data:
  zookeeper_data:
  zookeeper_log:
  kafka_data:
  cassandra_data:

networks:
  kafka-network:
    driver: bridge
  backend-network:
    driver: bridge
  cassandra-network:
    driver: bridge
